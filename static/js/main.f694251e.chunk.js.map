{"version":3,"sources":["components/ArticleFeed/PostPreview/Images/no-image.png","components/GameOptions/Images/Draw.png","components/GameOptions/Images/Resign.png","components/CreateGameBox/Images/rook-black.png","components/CreateGameBox/Images/rook-mixed.png","components/CreateGameBox/Images/rook-white.png","shared/components/utils/Spinner/spinner.gif","shared/components/layout/Header.js","shared/components/layout/Footer.js","shared/components/layout/Content.js","components/ArticleFeed/PostPreview/PostPreview.js","components/ArticleFeed/ArticleFeed.js","components/Chatbox/Chatbox.js","components/ChessGame/ChessGame.js","components/GameHistory/GameHistory.js","components/GameInfo/GameInfo.js","components/Timer/Timer.js","components/GameOptions/GameOptions.js","components/localStorage.js","components/LiveMatch/LiveMatch.js","configuration.js","shared/components/utils/Slider/Slider.js","components/UpVote/UpVote.js","components/Post/CommentFeed/Comment/Comment.js","components/Post/CommentFeed/CommentFeed.js","components/Post/Post.js","components/Compose/Compose.js","components/JoinGameBox/JoinGameBox.js","components/CreateGameBox/CreateGameBox.js","components/Play/Play.js","shared/components/Login/Login.js","shared/components/utils/Spinner/Spinner.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","title","url","react_default","a","createElement","id","Link","to","localStorage","getItem","Component","Footer","className","Date","getFullYear","Content","children","PostPreview","json","JSON","parse","post","json_metadata","image","author","permlink","created","toDateString","class","concat","src","alt","noImage","client","Client","ArticleFeed","posts","fetchBlog","limit","sortMethod","_this2","query","tag","database","getDiscussions","then","result","forEach","push","PostPreview_PostPreview_PostPreview","forceUpdate","catch","err","alert","map","Chatbox","messageList","peer","draftedMessage","updateDraft","bind","assertThisInitialized","sendMessage","data","console","log","message","now","setState","area","target","value","isEmptyOrSpaces","sendData","type","timeSent","refs","draftArea","match","_ref","index","_ref2","slicedToArray","fromOpponent","Chatbox_MessageBubble","key","toString","ref","onChange","e","onClick","MessageBubble","_this3","time","date","hours","getHours","minutes","getMinutes","seconds","getSeconds","substr","formattedTime","getFormattedTime","ChessGame","fen","squareStyles","pieceSquare","gameData","error","color","startingColor","toLowerCase","gameOver","myTurn","opponentColor","dropSquareStyle","boxShadow","history","removeHighlightSquare","highlightSquare","onDrop","onMouseOverSquare","onMouseOutSquare","onReceiveMove","game","Chess","isValidMove","sourceSquare","targetSquare","commitPieceMove","warn","squareStyling","squaresToHighlight","highlightStyles","toConsumableArray","reduce","c","objectSpread","defineProperty","background","borderRadius","piece","move","availableMoves","moves","square","filteredMoves","option","charAt","length","substring","includes","indexOf","_this4","from","promotion","_ref3","gameHistory","verbose","mostRecentMove","addMoveToHistory","in_stalemate","gameEnded","in_draw","in_checkmate","i","backgroundColor","_this5","chessboard_min_default","position","orientation","PureComponent","pieceToUnicode","wp","wn","wr","wb","wq","bp","bn","br","bb","bq","GameHistory","whiteMoves","blackMoves","whiteList","blackList","GameHistory_Move","_ref4","Move","undefined","returnString","captured","getFormattedMove","GameInfo","gameType","gameTime","increment","ranked","black","white","Timer","ended","display","timerColor","initialize","startTime","on","timeLeft","updateDisplay","isNaN","endTime","tickLoop","setTimeout","timesUp","Math","max","floor","GameOptions","gameFinished","onDrawClicked","onResignClicked","window","confirm","drawClicked","resignClicked","DrawImage","ResignImage","loadState","account","login","dsteem","require","steemTransact","LiveMatch","location","chatboxComponent","React","createRef","chessGameComponent","opponentTimerComponent","myTimerComponent","gameHistoryComponent","gameOptionsComponent","sendPeerData","opponentTimesUp","myTimesUp","gameDataParser","stopTimers","gameHasEnded","destroy","localDB","username","posting_key","PrivateKey","fromString","current","start","parsedData","onReceiveMessage","pause","addTime","resumeTimers","connected","send","stringify","addMove","stop","endStatus","endStatusString","endGame","opponentUsername","matchData","getGameHistory","_","typeID","split","components_GameInfo_GameInfo","components_Chatbox_Chatbox","components_ChessGame_ChessGame","components_Timer_Timer","components_GameOptions_GameOptions","components_GameHistory_GameHistory","Mainnet","addressPrefix","chainId","Slider","onValueChanged","unit","min","step","valueChanged","UpVote","NetConfig","weight","weightId","voteButtonValue","expanded","pushVote","expandDropdown","closeDropdown","weightChanged","pKey","vote","voter","parseInt","broadcast","handleClick","utils_Slider_Slider","md","html","linkify","Comment","fetchComments","pushComment","bodyId","replace","comments","commentAuthor","comment","commentPermlink","numericId","commentBodyId","replyButtonValue","body","render","ReactHtmlParser","net_votes","rows","placeholder","UpVote_UpVote_UpVote","opts","fetchClient","pushClient","CommentFeed","parentAuthor","parentPermlink","fetchCallback","commentList","Comment_Comment_Comment","document","getElementById","parent_author","parent_permlink","random","payload","Remarkable","Post","params","openPost","content","style","innerHTML","CommentFeed_CommentFeed_CommentFeed","getAccessToken","getAPI","CustomToolbar","false","insertImage","range","quill","getSelection","prompt","insertEmbed","Quill","sources","USER","Compose","postSubmitted","postBody","privateKey","editor","editorButtonValue","modules","toolbar","container","handlers","pushPost","switchEditor","handleChange","taglist","tags","disabled","newBody","_React$createElement2","size","Compose_CustomToolbar","react_quill_lib_default","defaultValue","steemState","JoinGameBox","filterValue","availableGames","selected","selectedData","processor","joinClicked","findGameRequests","waitingOpponents","maxWaitingTime","findBlockHead","headBlockNumber","block","gameIndex","games","prevState","splice","options","optionsSplitter","onJoinGameClicked","es","columns","accessor","getTimeControlChosen","getTimePerSide","getTrProps","rowInfo","row","original","showPagination","noDataText","resizable","CreateGameBox","timeControlOptions","timeControlChosen","pieceChosen","startingColorText","timePerSide","pieceChanged","timePerSideChanged","incrementChanged","grabGameData","createClicked","onCreateGameClicked","noshade","CreateGameBox_PieceList","onPieceChanged","PieceList","colorChoices","BlackPiece","MixedPiece","WhitePiece","pieces","file","pieceClicked","cryptico","GAME_ID","Play","transactor","optionClicked","createGameComponent","joinGameComponent","gameRequestBlocks","closeRequestBlocks","createGameClicked","joinGameClicked","personalRSA","generateRSAKey","publicKey","publicKeyString","encrypted","encrypt","status","cipher","decrypted","RSA","decrypt","plaintext","text","hash","charCodeAt","clearTimeout","failedToJoinTimeout","createGameTimeout","PubSub","publish","spin","generatePersonalKey","Promise","resolve","reject","getDynamicGlobalProperties","head_block_number","matchableGames","waitingPlayers","iBlock","j","jBlock","playerIndex","possibleClosedGame","first","second","opponentData","decideRandom","initializePeer","thisColor","thatColor","listenForJoinTag","block_num","currentBlockNumber","opponentKey","initializingConnection","receivingTag","sendingTag","Peer","initiator","trickle","_this6","sendSignalToUser","pathname","headerBlockNumber","signal","decryptedSignal","encryptedSignal","_this7","findWaitingPlayers","opponentBlock","checkWaitingPlayers","postGameRequest","sendGameRequest","components_CreateGameBox_CreateGameBox","components_JoinGameBox_JoinGameBox","Login","removeItem","password","handleAccountChange","handlePasswordChange","handleLogin","setItem","saveState","Spinner","enabled","SpinnerImage","App","spinning","subscribe","unsubscribe","spinnerToken","BrowserRouter","utils_Spinner_Spinner","layout_Header","layout_Content","Route","path","ArticleFeed_ArticleFeed_ArticleFeed","assign","exact","components_Play_Play","components_LiveMatch_LiveMatch","component","layout_Footer","Boolean","hostname","ReactDOM","src_components_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f694251e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/no-image.301ce772.png\";","module.exports = __webpack_public_path__ + \"static/media/Draw.17b6a969.png\";","module.exports = __webpack_public_path__ + \"static/media/Resign.5997b080.png\";","module.exports = __webpack_public_path__ + \"static/media/rook-black.3d52ae77.png\";","module.exports = __webpack_public_path__ + \"static/media/rook-mixed.f81d7ebe.png\";","module.exports = __webpack_public_path__ + \"static/media/rook-white.285f87a2.png\";","module.exports = __webpack_public_path__ + \"static/media/spinner.5fe4039b.gif\";","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport '../../../components/App.css';\n\n// We created a component with a simple arrow function.\nclass Header extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            title: this.props.title ? this.props.title : \"SteemChess\",\n            url: 'http://localhost:3000'\n        }\n    }\n\n    render() {\n        return (\n            <header>\n                <h1>{this.state.title}</h1>\n                <ul id=\"menubar-list\">\n                    <li><Link to=\"/Play\">Play</Link></li>\n                    <li><Link to=\"/\">Trending</Link></li>\n                    <li><Link to=\"/New\">New</Link></li>\n                    <li><Link to=\"/Hot\">Hot</Link></li>\n                    <li><Link to='/Compose'>Compose</Link></li>\n                    <li><Link to={\"/Login\"}>{localStorage.getItem('login') === null ? 'Login' : 'Logout'}</Link></li>\n                </ul>\n                {/* <div class=\"search-box\">\n                        <input type=\"search\" id=\"search\" placeholder=\"Search...\" />\n                </div> */}\n                <h1/>\n            </header>\n        );\n    }\n}\n\n// Even with Functional Components we are able to validate our\n// PropTypes.\nHeader.propTypes = {\n    title: PropTypes.string.isRequired,\n    url: PropTypes.string\n};\n\nexport default Header;\n","import React from 'react';\n\n// Since we don't have props, we can directly return our JSX.\nconst Footer = () => (\n    <footer className='App-footer'>&copy; SteemChess {(new Date()).getFullYear()}</footer>\n);\n\nexport default Footer;\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Content = props => {\n\n    const {children} = props;\n\n    return (\n        <main className=\"App-content\">\n            {children}\n        </main>\n    );\n};\n\nContent.propTypes = {\n    children: PropTypes.element.isRequired\n};\n\nexport default Content;","import React, {Component} from 'react';\nimport { Link } from 'react-router-dom';\nimport './PostPreview.css';\nimport noImage from './Images/no-image.png';\n\nexport default class PostPreview extends Component {\n\n    constructor(props) {\n\n        super(props);\n\n        // parse and extract contents of post for preview\n        const json = JSON.parse(this.props.post.json_metadata);\n\n        this.state = {\n\n            image: json.image ? json.image[0] : '',\n            title: this.props.post.title,\n            author: this.props.post.author,\n            permlink: this.props.post.permlink,\n            created: new Date(this.props.post.created).toDateString()\n\n        };\n\n    }\n\n    render() {\n\n        return (  \n            \n            <div className=\"PostPreview\">\n             <p>by {this.state.author}</p>\n            <p class=\"list-group-item-text text-right text-nowrap\">{this.state.created}</p>\n            <Link to={`Post/@${this.state.author}/${this.state.permlink}`} class='articlelink'>        \n                <center class=\"crop\"> \n                    { this.state.image ? <img src={this.state.image} class=\"img-responsive center-block\" alt=\"\"/> : <img src={noImage} alt=\"No Image\" /> }\n                </center>\n                <p className='link'>{this.state.title}</p>\n            </Link>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport './ArticleFeed.css';\nimport { Client } from 'dsteem';\nimport PostPreview from './PostPreview/PostPreview';\nimport { Link } from 'react-router-dom';\n\nconst client = new Client('https://api.steemit.com');\n\nexport default class ArticleFeed extends Component {\n\n    constructor(props) {\n\n        super(props);\n\n        this.state = {\n\n            posts: []\n\n        };\n\n        this.fetchBlog(this.props.limit, this.props.sortMethod);\n\n    }\n\n    fetchBlog() {\n\n        const query = {\n            tag: 'chess',\n            limit: this.props.limit,\n        };\n\n        client.database\n            .getDiscussions(this.props.sortMethod, query)\n            .then(result => {\n\n                result.forEach(post => {\n\n                    this.state.posts.push(<PostPreview post={post}/>);\n\n                });\n\n                this.forceUpdate();\n\n            })\n\n            .catch(err => {\n\n                alert('Error occured: ' + err);\n\n            });\n\n    }\n\n    render() {\n\n        return (\n            \n            <div className=\"ArticleFeed\">\n\n                <div class=\"list-group\" id=\"postList\">{this.state.posts.map(PostPreview =>\n                    <div> {PostPreview} </div>)}</div>\n\n            </div>\n\n        )\n\n    }\n    \n}","import React, { Component } from \"react\";\nimport \"./Chatbox.css\";\n\nclass Chatbox extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            messageList: this.props.messageList ? this.props.messageList : [],\n            peer: this.props.peer,\n            draftedMessage: \"\"\n        }\n        this.updateDraft = this.updateDraft.bind(this);\n        this.sendMessage = this.sendMessage.bind(this);\n    }\n\n    /**\n     * Called when LiveMatch notifies Chatbox of a new message\n     * @param {*} message \n     */\n    onReceiveMessage(data) {\n        console.log(\"Received data from peer!\");\n        this.state.messageList.push([data.message, Date.now(), true]);\n        this.setState({ messageList: this.state.messageList });\n    }\n\n    updateDraft(area) {\n        this.setState({ draftedMessage: area.target.value });\n    }\n\n    sendMessage() {\n        if (this.isEmptyOrSpaces(this.state.draftedMessage)) return;\n\n        this.props.sendData({\n            type: \"message\",\n            timeSent: Date.now(),\n            message: this.state.draftedMessage,\n        });\n\n        this.state.messageList.push([this.state.draftedMessage, Date.now(), false]);\n        this.setState({ messageList: this.state.messageList });\n\n        this.setState({ draftedMessage: \"\" });\n        this.refs.draftArea.value = \"\"\n    }\n\n    isEmptyOrSpaces(message) {\n        return message === null || message.match(/^ *$/) !== null;\n    }\n\n    render() {\n        var messageList;\n        if (this.state.messageList != null) {\n            messageList = this.state.messageList.map(([message, timeSent, fromOpponent], index) =>\n                <MessageBubble key={index}\n                    message={message.toString()}\n                    timeSent={timeSent}\n                    fromOpponent={fromOpponent} />\n            )\n        }\n        return (\n            <section id=\"messages-main\">\n                <section id=\"messages-list\" className='messages-list'>\n                    <span>\n                        {messageList}\n                    </span>\n                </section>\n                <section id=\"new-message\" className='new-msg'>\n                    <textarea ref=\"draftArea\" className='msg'\n                        onChange={e => this.updateDraft(e)}></textarea>\n\n                    <button onClick={e => this.sendMessage()} id='Send'>Send</button>\n                </section>\n            </section>\n        );\n    }\n}\n\n/**\n * Message bubble. Passed in the message and the time sent\n */\nclass MessageBubble extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: this.props.message,\n            timeSent: this.props.timeSent,\n            fromOpponent: this.props.fromOpponent,\n        }\n    }\n\n    getFormattedTime(time) {\n        var date = new Date(time);\n        var hours = date.getHours();\n        var minutes = \"0\" + date.getMinutes();\n        var seconds = \"0\" + date.getSeconds();\n        // Will display time in hh:mm:ss format\n        return hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\n    }\n\n    render() {\n        var formattedTime = this.getFormattedTime(this.state.timeSent);\n        return (\n            <div className={this.state.fromOpponent ? \"chatbox-message-opponent\" : \"chatbox-message-mine\"}>\n                <div className={this.state.fromOpponent ? \"chatbox-bubble-opponent\" : \"chatbox-bubble-mine\"}>\n                    <h1>{this.state.message}</h1>\n                </div>\n                <h5 className=\"message-content-end\">{formattedTime}</h5>\n            </div>\n        );\n    }\n}\n\nexport default Chatbox;","import React, { PureComponent } from 'react';\nimport Chessboard from 'chessboardjsx'\nimport Chess from 'chess.js'\nimport './ChessGame.css'\n\nconst DISABLE_BLOCKCHAIN = false;\n//var PiecesEnum = Object.freeze({\"Black\":1, \"White\":2})\n\n//This component will encapsulate the chessboardjsx ui and the chess.js engine.\nclass ChessGame extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      fen: \"start\",\n      squareStyles: {},// custom square styles\n      pieceSquare: \"\",// square with the currently clicked piece\n    };\n\n    if (this.props.gameData == null) {\n      console.error(\"ChessGame component not passed any game data\");\n    }\n    else {\n      console.log(\"Chess game props: \", this.props.gameData);\n      this.gameData = this.props.gameData;\n      this.color = this.gameData.startingColor[0].toLowerCase();\n    }\n\n    this.gameOver = false;\n    this.myTurn = this.color === \"w\";\n    this.opponentColor = this.color === \"w\" ? \"b\" : \"w\";\n    this.dropSquareStyle = { boxShadow: \"inset 0 0 1px 4px rgb(255, 255, 0)\" }; // square styles for active drop square\n    this.history = []; //array of past game moves\n    this.removeHighlightSquare = this.removeHighlightSquare.bind(this);\n    this.highlightSquare = this.highlightSquare.bind(this);\n    this.onDrop = this.onDrop.bind(this);\n    this.onMouseOverSquare = this.onMouseOverSquare.bind(this);\n    this.onMouseOutSquare = this.onMouseOutSquare.bind(this);\n    this.onReceiveMove = this.onReceiveMove.bind(this);\n  }\n\n  componentDidMount() {\n    this.game = new Chess();\n  }\n\n  onReceiveMove(data) {\n    console.log(\"Received move from other player!\");\n    if (data.color !== this.opponentColor) {\n      console.warn(\"Opponent tried to move wrong piece and it went through!\");\n      return;\n    }\n    if (this.isValidMove(data.sourceSquare, data.targetSquare)) {\n      this.commitPieceMove(data.sourceSquare, data.targetSquare);\n      this.myTurn = true;\n    }\n  }\n\n  // keep clicked square style and remove hint squares\n  removeHighlightSquare() {\n    this.setState(({ pieceSquare }) => ({\n      squareStyles: this.squareStyling(pieceSquare, this.history)\n    }));\n  };\n\n  // show possible moves\n  highlightSquare(sourceSquare, squaresToHighlight) {\n    const highlightStyles = [sourceSquare, ...squaresToHighlight].reduce(\n      (a, c) => {\n        return {\n          ...a,\n          ...{\n            [c]: {\n              background:\n                \"radial-gradient(circle, #fffc00 36%, transparent 40%)\",\n              borderRadius: \"50%\"\n            }\n          },\n          ...this.squareStyling(\n            this.state.pieceSquare,\n            this.history\n          )\n        };\n      },\n      {}\n    );\n\n    this.setState(({ squareStyles }) => ({\n      squareStyles: { ...squareStyles, ...highlightStyles }\n    }));\n  };\n\n  onDrop(e) {\n    if(this.gameOver) return;\n    if (!DISABLE_BLOCKCHAIN && !this.myTurn) {\n      console.warn(\"Tried to move a piece while it was the opponent's turn\");\n      return;\n    }\n\n    if (!this.isValidMove(e.sourceSquare, e.targetSquare)) {\n      console.warn(\"Tried to move to an invalid square\");\n      return;\n    }\n\n    var success = this.props.sendData({\n      type: \"move\",\n      sourceSquare: e.sourceSquare,\n      targetSquare: e.targetSquare,\n      piece: e.piece,\n      time: Date.now,\n      move: this.game.fen(),\n      color: this.color\n    });\n\n    if(!success) {\n      console.error(\"Failed to send move to opponent\");\n      return;\n    }\n\n    this.commitPieceMove(e.sourceSquare, e.targetSquare);\n    this.myTurn = false;\n  };\n\n  isValidMove(sourceSquare, targetSquare) {\n    var availableMoves = this.game.moves({ square: sourceSquare });\n    var filteredMoves = [];\n    availableMoves.forEach(option => {\n      var move = option;\n      //Would put the other player in check\n      if(move.charAt(move.length-1) === \"+\") {\n        move = move.substring(0, move.length-1);\n      }\n      //Would put the other player in checkmate\n      if(move.charAt(move.length-1) === \"#\") {\n        move = move.substring(0, move.length-1);\n      }\n      //Pawn reaching other side\n      if(move.includes(\"=\")) {\n        move = move.substring(0, move.length-2);\n      }\n      filteredMoves.push(move.substring(move.length-2, move.length));\n    });\n    console.log(\"available moves\", availableMoves, sourceSquare, targetSquare);\n    return filteredMoves != null && filteredMoves.indexOf(targetSquare) >= 0;\n  }\n\n  commitPieceMove(sourceSquare, targetSquare) {\n    this.game.move({\n      from: sourceSquare,\n      to: targetSquare,\n      promotion: \"q\" // always promote to a queen for simplicity. This is for pawns that make it to the other side\n    });\n    this.setState(({ pieceSquare }) => ({\n      fen: this.game.fen(),\n      squareStyles: this.squareStyling(pieceSquare, this.history)\n    }));\n    var gameHistory = this.game.history({verbose: true});\n    var mostRecentMove = gameHistory[gameHistory.length-1];\n    this.props.addMoveToHistory(mostRecentMove, Date.now());\n    this.history.push(mostRecentMove);\n    console.log(this.game);//TEMP\n    if(this.game.in_stalemate()) {\n      this.props.gameEnded(\"stalemate\");\n      alert('Stalemate!');\n    }\n    else if (this.game.in_draw()) {\n      this.props.gameEnded(\"draw\");\n      alert('A Draw!');\n    }\n    else if (this.game.in_checkmate()) {\n      if(this.myTurn) {\n        this.props.gameEnded(\"checkmate won\");\n      }\n      else {\n        this.props.gameEnded(\"checkmate lost\");\n      }\n      alert('Checkmate!');\n    }\n  }\n\n  onMouseOverSquare(square) {\n    if(this.gameOver || !this.myTurn) return;\n\n    // get list of possible moves for this square\n    var moves = this.game.moves({\n      square: square,\n      verbose: true\n    });\n\n    // exit if there are no moves available for this square\n    if (moves.length === 0) return;\n\n    var squaresToHighlight = [];\n    for (var i = 0; i < moves.length; i++) {\n      squaresToHighlight.push(moves[i].to);\n    }\n\n    this.highlightSquare(square, squaresToHighlight);\n  };\n\n  onMouseOutSquare(square) {\n    this.removeHighlightSquare(square);\n  }\n\n  squareStyling(pieceSquare, history) {\n    const sourceSquare = history.length && history[history.length - 1].from;\n    const targetSquare = history.length && history[history.length - 1].to;\n\n    return {\n      [pieceSquare]: { backgroundColor: \"rgba(255, 255, 0, 0.4)\" },\n      //style of square piece was just moved from\n      ...(history.length && {\n        [sourceSquare]: {\n          backgroundColor: \"rgba(255, 255, 0, 0.4)\"\n        }\n      }),\n      //style of square piece was just moved to\n      ...(history.length && {\n        [targetSquare]: {\n          backgroundColor: \"rgba(255, 255, 0, 0.4)\"\n        }\n      })\n    };\n  };\n\n  endGame() {\n    this.gameOver = true;\n  }\n\n  getGameHistory() {\n    return this.history;\n  }\n\n  render() {\n    const { squareStyles } = this.state;\n\n    return (\n        <Chessboard id='chessboard'\n          position={this.state.fen}\n          onDrop={e => this.onDrop(e)}\n          orientation={this.color === \"b\" ? \"black\" : \"white\"}\n          onMouseOverSquare={e => this.onMouseOverSquare(e)}\n          onMouseOutSquare={e => this.onMouseOutSquare(e)}\n          squareStyles={squareStyles}\n          dropSquareStyle={this.dropSquareStyle} />\n    );\n  }\n}\n\nexport default ChessGame;","import React, { Component } from \"react\";\nimport \"./GameHistory.css\";\n\nconst pieceToUnicode = {\n    \"wp\": \"\\u2659\",\n    \"wn\": \"\\u2658\",\n    \"wr\": \"\\u2656\",\n    \"wb\": \"\\u2657\",\n    \"wq\": \"\\u2655\",\n    \"bp\": \"\\u265F\",\n    \"bn\": \"\\u265E\",\n    \"br\": \"\\u265C\",\n    \"bb\": \"\\u265D\",\n    \"bq\": \"\\u265B\",\n}\n\nclass GameHistory extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            whiteMoves: [],\n            blackMoves: [],\n        }\n        this.history = [];\n    }\n\n    addMove(move, time) {\n        if (move.color === \"w\") {\n            this.setState({ whiteMoves: [...this.state.whiteMoves, [move, time]] });\n        }\n        else {\n            this.setState({ blackMoves: [...this.state.blackMoves, [move, time]] });\n        }\n    }\n\n    render() {\n        var whiteList;\n        if (this.state.whiteMoves != null) {\n            whiteList = this.state.whiteMoves.map(([move, time], index) =>\n                <Move key={index}\n                    move={move}\n                    time={time} />\n            )\n        }\n        var blackList;\n        if (this.state.blackMoves != null) {\n            blackList = this.state.blackMoves.map(([move, time], index) =>\n                <Move key={index}\n                    move={move}\n                    time={time} />\n            )\n        }\n        return (\n            <div id=\"history-main-div\">\n                <section id=\"history-headers\">\n                    <div id=\"history-white-header\">White</div>\n                    <div id=\"history-black-header\">Black</div>\n                </section>\n                <div id=\"history-moves-div\">\n                <section id=\"white-history-box\">\n                    <span>\n                        {whiteList}\n                    </span>\n                </section>\n                <section id=\"black-history-box\">\n                    <span>\n                        {blackList}\n                    </span>\n                </section>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Move extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            move: this.props.move,\n            time: this.props.time,\n        }\n        console.log(\"created a move!\");\n    }\n\n    getFormattedMove() {\n        if (this.state.move == null || this.state.move == undefined) return \"\";\n        var returnString = \"\";\n        if(this.state.move.captured !== undefined) {\n            var opponentColor = this.state.move.color === \"w\" ? \"b\" : \"w\";\n            returnString += pieceToUnicode[opponentColor + this.state.move.captured] + \" \";\n        }\n        return returnString += this.state.move.from + \" \\u2192 \" + this.state.move.to;\n    }\n\n    getFormattedTime() {\n        var date = new Date(this.state.time);\n        var hours = date.getHours();\n        var minutes = \"0\" + date.getMinutes();\n        var seconds = \"0\" + date.getSeconds();\n        // Will display time in hh:mm:ss format\n        return hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\n    }\n\n    render() {\n        return (\n            <div>\n                <h4 className=\"move\">{this.getFormattedMove()}</h4>\n                <h6 className=\"time\">{this.getFormattedTime()}</h6>\n            </div>\n        );\n    }\n}\n\nexport default GameHistory;","import React, {Component} from 'react';\nimport './GameInfo.css';\n\nclass GameInfo extends Component{\n    constructor(props) {\n        super(props)\n        this.state = {\n            gameType: this.props.gameType,\n            gameTime: this.props.gameTime,\n            increment: this.props.increment,\n            ranked: this.props.ranked,\n            black: this.props.black,\n            white: this.props.white\n        }\n    }\n        \n    \n    render(){\n        return(\n            <div id=\"game-info-box\">\n                <div className='Top'>\n                    <h4>{this.state.gameType} {this.state.gameTime} - {this.state.increment} {this.state.ranked}</h4>\n                </div>\n                <div className='Bottom'>\n                    <h4>{this.state.black}</h4>\n                    <h4>{this.state.white}</h4>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default GameInfo;","import React, { Component } from 'react';\nimport './Timer.css'\n\nconst tps = 30;\nconst rate = 1000 / tps;\n\n/**\n * A component used to keep track of how much time\n * a player has left in a match\n */\nclass Timer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ended: false,\n            display: null,\n            timerColor: \"timer-paused\",\n        }\n    }\n\n    componentDidMount() {\n        this.initialize();\n    }\n\n    initialize() {\n        //Using this instead of counting down from settimeout prevents \n        //timer from stopping when game is not the current tab\n        this.startTime = Date.now();\n        this.on = false;\n        var hours = 0, minutes = 0, seconds = 0;\n        if (this.props.hours != null) {\n            hours = this.props.hours;\n        }\n        if (this.props.minutes != null) {\n            minutes = this.props.minutes;\n        }\n        if (this.props.seconds != null) {\n            seconds = this.props.seconds;\n        }\n        this.timeLeft = ((((hours * 60) + minutes) * 60) + seconds) * 1000;\n        this.updateDisplay();\n    }\n\n    start(startTime) {\n        this.setState({timerColor:\"timer-on\"})\n        if(isNaN(startTime)) {\n            startTime = Date.now();\n        }\n        this.on = true;\n        this.endTime = startTime + this.timeLeft;\n        this.tickLoop();\n    }\n\n    tickLoop() {\n        setTimeout(() => {\n            this.updateDisplay();\n            this.timeLeft = this.endTime - Date.now();\n            if (this.on) {\n                if (this.timeLeft <= 0) {\n                    this.on = false;\n                    this.setState({timerColor:\"timer-finished\"});\n                    this.props.timesUp();\n                }\n                this.tickLoop();\n            }\n        }, rate);\n    }\n\n    pause() {\n        this.setState({timerColor:\"timer-paused\"});\n        this.on = false;\n    }\n\n    stop() {\n        if(this.state.timerColor === \"timer-paused\") {\n            this.setState({timerColor:\"timer-blank\"});\n        }\n        this.on = false;\n    }\n\n    addTime(seconds) {\n        if(isNaN(seconds)) return;\n        if (this.on) this.endTime = this.endTime + (seconds * 1000);\n        else this.timeLeft = this.timeLeft + (seconds * 1000);\n    }\n\n    updateDisplay() {\n        var minutes = Math.max(0, Math.floor(this.timeLeft / 60000));\n        if (minutes < 10) {\n            minutes = \"0\" + minutes;\n        }\n        var seconds = Math.max(0, Math.floor((this.timeLeft % 60000) / 1000));\n        if (seconds < 10) {\n            seconds = \"0\" + seconds;\n        }\n        this.setState({ display: minutes + \":\" + seconds });\n    }\n\n    render() {\n        return (\n            <div className={\"current-timer \" + this.state.timerColor}>\n                {this.state.display}\n            </div>\n        );\n    }\n}\n\nexport default Timer;","import React, { Component } from \"react\";\nimport \"./GameOptions.css\";\n\nimport DrawImage from \"./Images/Draw.png\"\nimport ResignImage from \"./Images/Resign.png\";\n\nclass GameOptions extends Component {\n    constructor(props) {\n        super(props);\n\n        this.gameFinished = false;\n\n        this.onDrawClicked = this.onDrawClicked.bind(this);\n        this.onResignClicked = this.onResignClicked.bind(this);\n    }\n\n    onDrawClicked(e) {\n        if (!this.gameFinished && window.confirm(\"Are you sure you want to request a draw?\")) {\n            this.props.drawClicked();\n        }\n    }\n\n    onResignClicked(e) {\n        if (!this.gameFinished && window.confirm(\"Are you sure you want to resign?\")) {\n            this.props.resignClicked();\n        }\n    }\n\n    render() {\n        return (\n            <div id=\"gameOptionsDiv\">\n                <img onClick={e => this.onDrawClicked(e)}\n                className=\"gameOption\"\n                    src={DrawImage}\n                    alt=\"Draw\" />\n                <img onClick={e => this.onResignClicked(e)}\n                className=\"gameOption\"\n                    src={ResignImage}\n                    alt=\"Resign\" />\n            </div>\n        );\n    }\n}\n\nexport default GameOptions;","export const loadState = () => {\n    try {\n        const serializedState = {\n            account: localStorage.getItem('account'),\n            key: localStorage.getItem('pKey'),\n            login: localStorage.getItem('login')\n        };\n        return serializedState;\n    } catch (err) {\n        return null;\n    }\n};\n\nexport const saveState = (account, pKey, login) => {\n    try {\n        localStorage.setItem('account', account);\n        localStorage.setItem('pKey', pKey);\n        localStorage.setItem('login', login);\n    } catch (err) {\n        //Write to log\n    }\n};","import React, { Component } from 'react';\nimport Chatbox from '../Chatbox/Chatbox';\nimport ChessGame from '../ChessGame/ChessGame';\nimport GameHistory from '../GameHistory/GameHistory';\nimport GameInfo from '../GameInfo/GameInfo';\nimport Timer from '../Timer/Timer';\nimport GameOptions from '../GameOptions/GameOptions'\nimport { loadState } from \"../../components/localStorage\";\nimport './LiveMatch.css';\n\nconst dsteem = require('dsteem');\nconst steemTransact = require('steem-transact');\nconst client = new dsteem.Client('https://api.steemit.com');\n\nconst GAME_ID = 'steem-chess-'\nconst MATCH_END_TAG = \"game-ended\";\n\nconst DISABLE_BLOCKCHAIN = false;\n\n/**\n * Component for playing a live chess match\n */\nclass LiveMatch extends Component {\n    constructor(props) {\n        super(props);\n        console.log(this.props);\n\n        this.peer = this.props.location.peer;\n        this.chatboxComponent = React.createRef();\n        this.chessGameComponent = React.createRef();\n        this.opponentTimerComponent = React.createRef();\n        this.myTimerComponent = React.createRef();\n        this.gameHistoryComponent = React.createRef();\n        this.gameOptionsComponent = React.createRef();\n        this.gameFinished = false;\n\n        if (this.props.location.gameData != null) {\n            this.gameData = this.props.location.gameData;\n        }\n        else {\n            this.gameData = null;\n        }\n\n        this.sendPeerData = this.sendPeerData.bind(this);\n        this.opponentTimesUp = this.opponentTimesUp.bind(this);\n        this.myTimesUp = this.myTimesUp.bind(this);\n        this.addMoveToHistory = this.addMoveToHistory.bind(this);\n        this.gameDataParser = this.gameDataParser.bind(this);\n        this.stopTimers = this.stopTimers.bind(this);\n        this.gameHasEnded = this.gameHasEnded.bind(this);\n        this.drawClicked = this.drawClicked.bind(this);\n        this.resignClicked = this.resignClicked.bind(this);\n    }\n    componentWillUnmount() {\n        if (this.peer !== null && this.peer !== undefined) {\n            this.peer.destroy();\n        }\n        this.stopTimers();\n    }\n\n    async componentDidMount() {\n        var localDB = loadState();\n        if (localDB.account == null) {\n            console.log(\"Went to LiveMatch without logging in\");\n            this.props.history.push(\"/Login\");\n            return;\n        }\n        else {\n            this.username = localDB.account;\n            try {\n                this.posting_key = dsteem.PrivateKey.fromString(localDB.key);\n            }\n            catch (e) {\n                console.error(e);\n            }\n        }\n        if (this.gameData == null) {\n            this.props.history.push(\"/Play\");\n            console.error(\"LiveMatch not passed any game data!\");\n            return;\n        }\n        if (this.peer == null && !DISABLE_BLOCKCHAIN) {\n            this.props.history.push(\"/Play\");\n            console.error(\"LiveMatch not passed a peer!\");\n            return;\n        }\n\n        if (this.gameData.startingColor === \"White\") {\n            this.myTimerComponent.current.start();\n        }\n        else {\n            this.opponentTimerComponent.current.start();\n        }\n\n        if (DISABLE_BLOCKCHAIN) return;\n\n        this.peer.on('data', (data) => {\n            var parsedData = JSON.parse(data);\n            console.log(\"got peer data\", parsedData);\n            if (parsedData.type === 'message') {\n                this.chatboxComponent.current.onReceiveMessage(parsedData);\n            }\n            else if (parsedData.type === 'move') {\n                this.chessGameComponent.current.onReceiveMove(parsedData);\n                this.opponentTimerComponent.current.pause();\n                this.opponentTimerComponent.current.addTime(this.gameDataParser(2));\n                this.myTimerComponent.current.start();\n            }\n            else if (parsedData.type === \"draw request\") {\n                this.stopTimers();\n                if (window.confirm(\"Opponent requested a draw. Do you want to accept?\")) {\n                    this.sendPeerData({type: \"draw accepted\"});\n                }\n                else {\n                    this.sendPeerData({type: \"draw denied\"});\n                }\n            }\n            else if(parsedData.type === \"draw accepted\") {\n                this.gameHasEnded(\"sent draw\")\n            }\n            else if(parsedData.type === \"draw denied\") {\n                this.resumeTimers();\n            }\n            else if (parsedData.type === \"resigned\") {\n                this.gameHasEnded(\"opponent resigned\");\n            }\n        });\n    }\n\n    /**\n     * Sends data to the connected peer\n     */\n    sendPeerData(data) {\n        if (data.type === \"move\") { //TODO make sure both players agree on timer times\n            this.myTimerComponent.current.pause();\n            this.myTimerComponent.current.addTime(this.gameDataParser(2));\n            this.opponentTimerComponent.current.start();\n        }\n        else if(data.type === \"resigned\") {\n            this.gameHasEnded(\"resigned\");\n            alert('You have successfully resigned');\n        }\n        else if(data.type === \"draw request\") {\n            this.stopTimers();\n        }\n        else if(data.type === \"draw accepted\") {\n            this.gameHasEnded(\"accepted draw\");\n        }\n        else if(data.type === \"draw denied\") {\n            this.resumeTimers();\n        }\n\n        if (DISABLE_BLOCKCHAIN) return true;\n\n        if (this.peer == null) {\n            console.error(\"Peer connection not initiated!\");\n            alert(\"Peer connection not initiated!\");\n            return false;\n        }\n        if (!this.peer.connected) {\n            console.error(\"Not connected to the other player yet!\");\n            alert(\"Not connected to the other player yet!\");\n            return false;\n        }\n        this.peer.send(JSON.stringify(data));\n        return true;\n    }\n\n    /**\n     * Called when the opponent's timer component reaches 0\n     */\n    opponentTimesUp() {\n        this.gameHasEnded(\"opponent timer ended\");\n        alert(\"You win!! Opponent ran out of time\");\n    }\n\n    /**\n     * Called when the local player's time reaches 0\n     */\n    myTimesUp() {\n        this.gameHasEnded(\"my timer ended\");\n        alert(\"Sorry, you lose! You ran out of time\");\n    }\n\n    addMoveToHistory(move, time) {\n        this.gameHistoryComponent.current.addMove(move, time);\n    }\n\n    stopTimers() {\n        if (this.myTimerComponent.current !== null)\n            this.myTimerComponent.current.stop();\n        if (this.opponentTimerComponent.current !== null)\n            this.opponentTimerComponent.current.stop();\n    }\n\n    resumeTimers() {\n        if (this.myTimerComponent.current !== null)\n            this.myTimerComponent.current.start();\n        if (this.opponentTimerComponent.current !== null)\n            this.opponentTimerComponent.current.start();\n    }\n\n    gameHasEnded(endStatus) {\n        console.log(this);\n        this.gameFinished = true;\n        this.gameOptionsComponent.current.gameFinished = true;\n        this.chessGameComponent.current.endGame();\n        this.stopTimers();\n\n        if (DISABLE_BLOCKCHAIN) return;\n\n        var endStatusString;\n        if (endStatus === \"checkmate won\") {\n            endStatusString = this.username + \" beat \" + this.props.opponentUsername;\n        }\n        else if (endStatus === \"checkmate lost\") {\n            endStatusString = this.props.opponentUsername + \" beat \" + this.username;\n        }\n        else if (endStatus === \"stalemate\") {\n            endStatusString = this.props.opponentUsername + \" got in a stalemate with \" + this.username;\n        }\n        else if (endStatus === \"my timer ended\") {\n            endStatusString = this.username + \" ran out of time\";\n        }\n        else if (endStatus === \"opponent timer ended\") {\n            endStatusString = this.props.opponentUsername + \" ran out of time\";\n        }\n        else if (endStatus === \"resigned\") {\n            endStatusString = this.props.opponentUsername + \" resigned in game with \" + this.username;\n        }\n        else if (endStatus === \"opponent resigned\") {\n            endStatusString = this.username + \" resigned in game with \" + this.props.opponentUsername;\n        }\n        else if (endStatus === \"sent draw\") {\n            endStatusString = this.props.opponentUsername + \" accepted draw from \" + this.username;\n        }\n        else if (endStatus === \"accepted draw\") {\n            endStatusString = this.username + \" accepted draw from \" + this.props.opponentUsername;\n        }\n        var matchData = {\n            endStatus: endStatusString,\n            history: this.chessGameComponent.current.getGameHistory()\n        }\n\n        var transactor = steemTransact(client, dsteem, GAME_ID);\n        transactor.json(this.username, this.posting_key.toString(), MATCH_END_TAG, matchData,\n            (err, _) => {\n                if (err) {\n                    console.error(err);\n                }\n            });\n    }\n\n    drawClicked() {\n        this.sendPeerData({type: \"draw request\"});\n    }\n\n    resignClicked() {\n        this.sendPeerData({type: \"resigned\"});\n    }\n\n    gameDataParser(index) {\n        if (this.gameData === null) return \"\";\n        var data = this.gameData.typeID.split(\"|\");\n        if (data.length > index) return data[index];\n    }\n\n    render() {\n        return (\n            <div id=\"Match\">\n                <div id=\"float-left\">\n                    <GameInfo gameType={this.gameDataParser(0)} gameTime={this.gameDataParser(1)} increment={this.gameDataParser(2)} ranked={false} />\n                    <Chatbox sendData={this.sendPeerData} ref={this.chatboxComponent} />\n                </div>\n                <div id=\"middle-div\">\n                    <ChessGame sendData={this.sendPeerData} addMoveToHistory={this.addMoveToHistory} ref={this.chessGameComponent} gameData={this.gameData} gameEnded={this.gameHasEnded} />\n                </div>\n                <div id=\"float-right\">\n                    <Timer timesUp={this.myTimesUp} ref={this.myTimerComponent} minutes={this.gameDataParser(1)} />\n                    <Timer timesUp={this.opponentTimesUp} ref={this.opponentTimerComponent} minutes={this.gameDataParser(1)} />\n                    <GameOptions ref={this.gameOptionsComponent} drawClicked={this.drawClicked} resignClicked={this.resignClicked} />\n                    <GameHistory ref={this.gameHistoryComponent} />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default LiveMatch;","/**\n * This is the main configuration file for the Steem developer Javascript tutorials\n *\n * In this configuration file we use 'address' to refer to what in many other contexts are called\n * user,\n * author,\n * account,\n * account name\n *\n * Address is a fairly accurate term, and hasn't been overloaded, it also has at-least exactly the properties of addresses on other blockchains.\n *\n */\n\nexport const TestnetSteemit = {\n    accounts: [\n        {\n            address: 'demo',\n            privActive: '5Jtbfge4Pk5RyhgzvmZhGE5GeorC1hbaHdwiM7pb5Z5CZz2YKUC',\n        },\n        {\n            address: 'demo1',\n            privActive: '5Ju3fhTY25Tsseyk4c1PUpH2bTLC8eLbdFRjytmnvU9ZLEQBmsf',\n        },\n        {\n            address: 'demo2',\n            privActive: '5JZDEAXjANq9isYa66g9tYbeuo4wWXhwXPfujwt9s4DaK4b38R9',\n        },\n        {\n            address: 'demo3',\n            privActive: '5J6bzy9TM3kBRibXmFi7ZvThrWGMN3epg7aCXLKazTLsJnmw6Mq',\n        },\n        {\n            address: 'demo4',\n            privActive: '5KQQKVHJBpygcBrqKF6TLQSBX5zHbPRgNEAuojb6fK2C94NX3kJ',\n        },\n        {\n            address: 'demo5',\n            privActive: '5K7QWGuAAX27yvQRPBMBDA4BbXVpdtmALxoM8CoRdZAsPew5hJd',\n        },\n    ],\n    url: 'https://testnet.steemitdev.com',\n    net: {\n        addressPrefix: 'TST',\n        chainId:\n            '46d82ab7d8db682eb1959aed0ada039a6d49afa1602491f93dde9cac3e8e6c32',\n    },\n};\n\nexport const TestnetVC = {\n    accounts: [\n        {\n            address: 'demo01',\n            privPosting: '5KNckabfv4i793ymx4NWrTLDQZMjhgQTJbPSTroeBY4Bh5Eg6Tm',\n            privActive: '5HxTntgeoLm4trnTz94YBsY6MpAap1qRVXEKsU5n1v2du1gAgVH',\n        },\n        {\n            address: 'demo02',\n            privPosting: '5KHUais1mfUn7A3M6pLZw1WF1v6WetFGCB1YDNctcPizLyCT1vW',\n            privActive: '5KgMKfnTQTzrmZP3RxrQs3CEckHTPXxFzJWHV3cJjetmXwLUWZj',\n        },\n    ],\n    url: 'https://testnet.steem.vc',\n    net: {\n        addressPrefix: 'STX',\n        chainId:\n            '79276aea5d4877d9a25892eaa01b0adf019d3e5cb12a97478df3298ccdd01673',\n    },\n};\n\nexport const Testnet = TestnetVC;\n\nexport const Mainnet = {\n    accounts: [],\n    url: 'https://api.steemit.com',\n    net: {\n        addressPrefix: 'STM',\n        chainId:\n            '0000000000000000000000000000000000000000000000000000000000000000',\n    },\n};\n\nexport default {};\n","import React, {Component} from 'react';\nimport './Slider.css'\n\nclass Slider extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: this.props.value ? this.props.value : 0\n        }\n    }\n\n    valueChanged(e) {\n        this.setState({value: e.target.value});\n        this.props.onValueChanged(e.target.value);\n    }\n\n    render() {\n        return (\n            <div className=\"slidecontainer\">\n                <p>{this.state.value} {this.props.unit}</p>\n                <input type=\"range\"\n                       min={this.props.min ? this.props.min : 0}\n                       max={this.props.max ? this.props.max : 100}\n                       step={this.props.step ? this.props.step : 1}\n                       value={this.state.value}\n                       className=\"slider\"\n                       id=\"myRange\"\n                       onChange={e => this.valueChanged(e)}/>\n            </div>\n        );\n    }\n}\n\n\nexport default Slider;","import React, {Component} from 'react';\nimport { Client, PrivateKey } from 'dsteem';\nimport { Mainnet as NetConfig } from '../../configuration';\nimport { loadState } from '../localStorage';\nimport './UpVote.css'\nimport Slider from '../../shared/components/utils/Slider/Slider';\n\nconst client = new Client('https://api.steemit.com');\n\nlet opts = {...NetConfig.net};\n\n export default class UpVote extends Component{\n\n    constructor(props){\n\n        super(props);\n\n        const localDB = loadState();\n        \n        this.state = {\n\n            account: localDB.account, // user who is voting\n            key: localDB.key,\n            author: this.props.author, // author of post to be voted on\n            permlink: this.props.permlink, // permlink of post to be voted on\n            weight: 0, // weight of vote\n            weightId: \"voteWeight\" + this.props.id, // unique id for each vote weight input\n            voteButtonValue: \"Open voting UI\",\n            expanded: false\n\n        };\n\n        this.pushVote = this.pushVote.bind(this);\n        this.expandDropdown = this.expandDropdown.bind(this);\n        this.closeDropdown = this.closeDropdown.bind(this);\n        this.weightChanged = this.weightChanged.bind(this);\n\n    }\n\n    pushVote() {\n\n        // check if user is logged in before attempting to post a comment\n        if (this.state.account == null) {\n\n            this.props.history.push('/Login');\n            return;\n\n        }\n\n        var pKey;\n\n        // if user is logged in, gen privateKey obejct from stored posting key\n        try {\n\n            pKey = PrivateKey.fromString(this.state.key);\n\n        } catch (e) {\n\n            console.error(e);\n\n            // check for garbage login, redirect to login if privatekey can't be generated\n            // this exception is thrown if password is invalid or is not a posting key, does not check for username/password association\n            if (e.message === \"private key network id mismatch\") {\n\n                alert(\"Bad password, please login again.\");\n                this.props.history.push('/Login');\n                return;\n\n            } else {\n\n                // if any other exception is thrown, redirect to home\n                alert(\"An error occurred when generating key. See console for details.\");\n                this.props.history.push('/');\n                return;\n\n            }\n\n        } \n\n        // check for useless vote\n        if (this.state.weight === 0) {\n\n            alert(\"Please select a weight for your vote.\");\n            return;\n\n        }\n    \n        // construct a vote object to broadcast\n        const vote = {\n\n            voter: this.state.account,\n            author: this.state.author,\n            permlink: this.state.permlink,\n            weight: parseInt(this.state.weight)\n\n        };\n\n        // attempt to broadcast vote\n        client.broadcast.vote(vote, pKey)\n        .then(result => {\n\n            console.log('Success! Vote Has Been Submitted:', result);\n            alert(\"Success.\");\n\n        },\n        function (error) {\n\n            console.error(error);\n\n                // check for bad username with valid password\n                // TODO: can't redirect to login when in .then, need to pass instance of this in somehow\n                if (error.message.includes(\"unknown key\")) {\n\n                    alert(\"Bad username, please login again.\");\n                    this.props.history.push('/Login');\n                    return;\n                    \n                } else {\n\n                    // all other exceptions\n                    alert(\"An error occurred when broadcasting. See console for details.\");\n\n                }\n\n        })\n\n    }\n\n    handleClick() {\n\n        if(this.state.expanded == false) {\n\n            this.expandDropdown();\n\n        } else {\n\n            this.closeDropdown();\n\n        }\n\n    }\n\n    expandDropdown() {\n\n        this.setState({ expanded: true });\n        this.setState({ voteButtonValue: \"Close voting UI\" });\n\n    }\n\n    closeDropdown() {\n\n        this.setState({ expanded: false });\n        this.setState({ voteButtonValue: \"Open voting UI\" });\n\n    }\n\n    weightChanged(value) {\n\n        this.setState({ weight: value });\n\n    }\n\n\n    render(){\n\n        return (  \n            <div className=\"upvote\">\n\n                <div id=\"upVote\"><br />\n                <button onClick={() => this.handleClick()} id=\"openVotes\" class='smallBtn'>{this.state.voteButtonValue}</button>\n                { this.state.expanded ? <Slider id={this.state.weightId} min='-10000' max='10000' step='100' onValueChanged={this.weightChanged} class='input'/> : null } \n                { this.state.expanded ? <button id=\"pushVoteBtn\" class='smallBtn' onClick={() => this.pushVote()}>Push vote</button> : null } \n                </div>                    \n            \n            </div>\n        )\n    }\n}\n\n","import React, { Component } from 'react';\nimport './Comment.css';\nimport ReactHtmlParser from 'react-html-parser';\nimport UpVote from '../../../UpVote/UpVote';\n\nconst Remarkable = require('remarkable');\nconst md = new Remarkable({ html: true, linkify: true });\n\nexport default class Comment extends Component {\n\n    constructor(props) {\n\n        super(props);\n\n        this.fetchComments = this.props.fetchComments.bind(this);\n        this.pushComment = this.props.pushComment.bind(this);\n        this.expandDropdown = this.expandDropdown.bind(this);\n        this.closeDropdown = this.closeDropdown.bind(this);\n\n        // extract id number from commentBodyId\n        let bodyId= this.props.id.replace( /^\\D+/g, '');\n\n        this.state = {\n\n            expanded: false,\n            comments: [], // this will hold all replies to this comment\n            commentAuthor: this.props.comment.author,\n            commentPermlink: this.props.comment.permlink,\n            numericId: bodyId, // this holds just the numeric suffix to append to unique id's in this comment\n            commentBodyId: this.props.id, // this will give each reply box a unique id to pass to the pushComment callback function\n            replyButtonValue: \"Open replies\" // this will hold the text that the open/close replies button should display\n\n        };\n\n    }\n\n    handleClick() {\n\n        if(this.state.expanded == false) {\n\n            this.expandDropdown();\n\n        } else {\n\n            this.closeDropdown();\n\n        }\n\n    }\n\n    expandDropdown() {\n\n        this.fetchComments(this.state.commentAuthor, this.state.commentPermlink, this.state.numericId, this.props.fetchComments);\n        this.setState( {expanded: true} );\n        this.setState( {replyButtonValue: \"Close replies\"} );\n\n    }\n\n    closeDropdown() {\n\n        this.setState( {expanded: false} );\n        this.setState( {replyButtonValue: \"Open replies\"} );\n\n    }\n\n    render() {\n\n        const body = md.render(this.props.comment.body);\n\n        return (\n            \n            <div id=\"Comment\" className=\"Comment\">\n\n                <div class=\"list-group-item list-group-item-action flex-column align-items-start\">\n                <div class=\"d-flex w-100 justify-content-between\">\n                <h5 class=\"mb-1\">@{this.state.commentAuthor}</h5>\n                <small class=\"text-muted\">{new Date(\n                    this.props.comment.created\n                ).toString()}</small>\n                </div>\n                <p class=\"mb-1\">{ ReactHtmlParser(body) }</p>\n                <small class=\"text-muted\">&#9650; ${\n                    this.props.comment.net_votes\n                    }</small>\n                </div>\n\n                <textarea id={this.state.commentBodyId} class=\"commentReply\" rows=\"3\" placeholder='Reply to this comment...'/><br />\n                <div id='Buttons'>\n                <input id=\"submitReplyBtn\" type=\"button\" value=\"Submit reply!\" onClick={() => this.pushComment(this.state.commentAuthor, this.state.commentPermlink, this.state.commentBodyId)} class=\"btn btn-primary\" />\n\n                <button onClick={() => this.handleClick()} class=\"openReplies\" id={\"openReplies\"} >{this.state.replyButtonValue}</button>\n                <div id=\"UpVote\"><UpVote author={this.state.commentAuthor} permlink={this.state.commentPermlink} id={this.state.numericId} history={this.props.history} /></div>\n                <div class=\"list-group\" id=\"postComments\">{this.state.comments.map(Comment => {\n                    return this.state.expanded ?  <div> {Comment} </div> : null\n                })} </div>\n                </div>\n            </div>\n\n        )\n    }\n}","import React, { Component } from 'react';\nimport './CommentFeed.css';\nimport { Client, PrivateKey } from 'dsteem';\nimport Comment from './Comment/Comment';\nimport { Mainnet as NetConfig } from '../../../configuration';\nimport { loadState } from \"../../../components/localStorage\";\n\nlet opts = { ...NetConfig.net };\nconst fetchClient = new Client('https://api.steemit.com');\nconst pushClient = new Client(NetConfig.url, opts);\n\n// TODO: refresh page when comment or reply is posted, may not be viable due to blockchain delays\n// TODO: use client from post component passed as callback?\n\nexport default class CommentFeed extends Component {\n\n    constructor(props) {\n\n        super(props);\n\n        const localDB = loadState();\n\n        this.state = {\n\n            // the post whose comments are being loaded in this commentFeed component is referred to as the parent post\n            parentAuthor: this.props.author,\n            parentPermlink: this.props.permlink,\n            comments: [],\n            account: localDB.account,\n            key: localDB.key\n\n        };\n\n        this.pushComment = this.pushComment.bind(this);\n        this.fetchComments(this.state.parentAuthor, this.state.parentPermlink, -1, this.fetchComments);\n        \n    }\n\n    // fetch comments on parent post\n    fetchComments(parentAuthor, parentPermlink, bodyId, fetchCallback) {\n\n        let commentList = [];\n\n        fetchClient.database\n            .call('get_content_replies', [parentAuthor, parentPermlink]) // fetch post comments\n            .then(result => {\n                \n                // push all post comments to state\n                for (var i = 0; i < result.length; i++) {\n\n                    if (bodyId === -1) {\n\n                        commentList.push(<Comment comment={result[i]} pushComment={this.pushComment} fetchComments={fetchCallback} id={\"commentBody\" + i} history={this.props.history} />);\n\n                    } else {\n\n                        commentList.push(<Comment comment={result[i]} pushComment={this.pushComment} fetchComments={fetchCallback} id={\"commentBody\" + bodyId + \"-\" + i} history={this.props.history} />);\n\n                    }\n                \n                }\n\n                this.setState( {comments: commentList} );\n\n            })\n\n            .catch(err => {\n\n                alert('Error occured: ' + err);\n\n            });\n\n    }\n\n    // push new comment to blockchain\n    pushComment(parentAuthor, parentPermlink, bodyId) {\n\n        // check if user is logged in before attempting to post a comment\n        if (this.state.account == null) {\n\n            this.props.history.push('/Login');\n            return;\n\n        }\n\n        var pKey;\n\n        // if user is logged in, gen privateKey obejct from stored posting key\n        try {\n\n            pKey = PrivateKey.fromString(this.state.key);\n\n        } catch (e) {\n\n            console.error(e);\n\n            // check for garbage login, redirect to login if privatekey can't be generated\n            // this exception is thrown if password is invalid or is not a posting key, does not check for username/password association\n            if (e.message === \"private key network id mismatch\") {\n\n                alert(\"Bad password, please login again.\");\n                this.props.history.push('/Login');\n                return;\n\n            } else {\n\n                // if any other exception is thrown, redirect to home\n                alert(\"An error occurred when generating key. See console for details.\");\n                this.props.history.push('/');\n                return;\n\n            }\n\n        }\n\n        // check that comment body field is populated\n        if (document.getElementById(bodyId).value === \"\") {\n\n            alert(\"Please fill out all fields.\");\n            return;\n\n        }\n\n        // get body\n        const body = document.getElementById(bodyId).value;\n        // get parent author permalink\n        const parent_author = parentAuthor;\n        // get parent author permalink\n        const parent_permlink = parentPermlink;\n\n        // generate random permanent link for post\n        const permlink = Math.random()\n            .toString(36)\n            .substring(2);\n\n        // construct payload object to broadcast\n        const payload = {\n\n            author: this.state.account,\n            title: '',\n            body: body,\n            parent_author: parent_author,\n            parent_permlink: parent_permlink,\n            permlink: permlink,\n            json_metadata: '',\n\n        };\n\n        // attempt to broadcast comment\n        console.log('pustCSlient.broadcast.comment payload:', payload);\n        pushClient.broadcast.comment(payload, pKey).then(\n\n            function (result) {\n\n                console.log('client.broadcast.comment response', result);\n                alert(\"Success.\")\n\n            },\n\n            function (error) {\n\n                console.error(error);\n\n                // check for bad username with valid password\n                // TODO: can't redirect to login when in .then, need to pass instance of this in somehow\n                if (error.message.includes(\"unknown key\")) {\n\n                    alert(\"Bad username, please login again.\");\n                    this.props.history.push('/Login');\n                    return;\n                    \n                } else {\n\n                    // all other exceptions\n                    alert(\"An error occurred when broadcasting. See console for details.\");\n\n                }\n\n            }\n\n        );\n\n    }\n\n    render() {\n\n        return (\n            <div id=\"CommentFeed\" class=\"container\"><br />\n\n                <hr />\n                <h4>Submit a comment:</h4>\n                Comment body:<br />\n                <textarea id=\"commentBodyRoot\" class=\"Replybody\" rows=\"3\" placeholder='Reply to this post...'/><br />\n                <input id=\"submitCommentBtn\" type=\"button\" value=\"Submit comment!\" onClick={() => this.pushComment(this.state.parentAuthor, this.state.parentPermlink, 'commentBodyRoot')} class=\"btn btn-primary\" />\n                <div id=\"postLink\" />\n\n                <h1>Comments</h1>\n                <hr />\n                <div class=\"list-group\" id=\"postComments\">{this.state.comments.map(Comment => <div> {Comment} </div>)}</div>\n\n            </div>\n        )\n    }\n}","import React, {Component} from 'react';\nimport './Post.css';\nimport { Client } from 'dsteem';\nimport CommentFeed from './CommentFeed/CommentFeed';\nimport UpVote from '../UpVote/UpVote';\n\nconst client = new Client('https://api.steemit.com');\nconst Remarkable = require('remarkable');\n\nexport default class Post extends Component {\n\n    constructor(props) {\n\n        super(props);\n\n        this.state = {\n\n            author: props.match.params.author,\n            permlink: props.match.params.permlink,\n            comments: []\n\n        };\n\n        this.openPost();\n\n    }\n\n    openPost() {\n    \n            // fetch post content\n            client.database.call('get_content', [this.state.author, this.state.permlink]).then(result => {\n    \n                const md = new Remarkable({ html: true, linkify: true });\n                const body = md.render(result.body);\n                const content = `<div class='pull-right'></div><br><h2 class='title'>${\n                    result.title\n                }</h2><br class='content'>${body}<br>`;\n\n            document.getElementById('postBody').style.display = 'block';\n            document.getElementById('postBody').innerHTML = content;\n\n            })\n            \n            .catch(err => {\n\n                alert('Error occured: ' + err);\n\n            });\n\n    }\n\n    render(){\n\n        return (\n            <div className=\"Post\">\n\n                <div id=\"postBody\"></div>\n                <div id=\"upVote\"><UpVote author={this.state.author} permlink={this.state.permlink} id={\"Root\"} history={this.props.history} /></div>\t\n                <CommentFeed history={this.props.history} author={this.state.author} permlink={this.state.permlink} getAccessToken={this.props.getAccessToken} getAPI={this.props.getAPI}/>\n                \n            </div>\n        )\n\n    }\n    \n} ","import React, { Component } from 'react';\nimport './Compose.css';\nimport { Client, PrivateKey } from 'dsteem';\nimport { Mainnet as NetConfig } from '../../configuration';\nimport { loadState, saveState } from \"../../components/localStorage\";\nimport { Link } from 'react-router-dom';\nimport ReactQuill, { Quill } from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\n\nlet opts = { ...NetConfig.net };\n\nconst client = new Client(NetConfig.url, opts);\n\n// TODO: when switching from a header font to normal, clicking once switches the editor to normal\n// but the selector still says header that was selected, have to click again to make the selector say 'normal'\n\n// TODO: make header dropdown wider so text doesn't clip with arrows, CSS?\n\n// define custom toolbar using custom image button\nconst CustomToolbar = () => (\n\n    <div id=\"toolbar\">\n        <span className=\"ql-formats\">\n            <button className=\"ql-bold\" />\n            <button className=\"ql-italic\" />\n            <button className=\"ql-strike\" />\n        </span>\n        <span className=\"ql-formats\">\n            <button className=\"ql-list\" value=\"bullet\" />\n            <button className=\"ql-list\" value=\"ordered\" />\n            <button className=\"ql-blockquote\" />\n        </span>\n        <span className=\"ql-formats\">\n            <button className=\"ql-link\" />\n            <button className=\"ql-image\" />\n        </span>\n        <span className=\"ql-formats\">\n            <span className=\"ql-header\">\n                <span className=\"ql-picker-label\" />\n                <span className=\"ql-picker-options\" />\n                <select className=\"ql-header\">\n                    <option false />\n                    <option value=\"3\" />\n                    <option value=\"2\" />\n                    <option value=\"1\" />\n                </select>\n            </span>\n        </span>\n    </div>\n\n  );\n\n// implements embedding images with URL\nfunction insertImage() {\n\n    var range = this.quill.getSelection();\n    var value = prompt('Enter image URL');\n    if (value) { // avoid adding anything to body if user cancels prompt\n\n        this.quill.insertEmbed(range.index, 'image', value, Quill.sources.USER);\n        \n    } \n\n}\n\nexport default class Compose extends Component {\n\n    constructor(props) {\n\n        super(props);\n\n        // postSubmitted must be set to false before checking for redirect so that\n        // render does not crash when trying to access it in the case of a user not being logged in\n        this.state = {\n\n            postSubmitted: false,\n            postBody: \"\"\n\n        };\n\n        const localDB = loadState();\n\n        // check if user is logged in, redirect if not\n        if (localDB.account == null) {\n\n            this.props.history.push('/Login');\n            return;\n\n        }\n\n        var pKey;\n\n        // if user is logged in, gen privateKey obejct from stored posting key\n        try {\n\n            pKey = PrivateKey.fromString(localDB.key);\n\n        } catch (e) {\n\n            console.error(e);\n\n            // check for garbage login, redirect to login if privatekey can't be generated\n            // this exception is thrown if password is invalid or is not a posting key, does not check for username/password association\n            if (e.message === \"private key network id mismatch\") {\n\n                alert(\"Bad password, please login again.\");\n                this.props.history.push('/Login');\n                return;\n\n            } else {\n\n                // if any other exception is thrown, redirect to home\n                alert(\"An error occurred when generating key. See console for details.\");\n                this.props.history.push('/');\n                return;\n\n            }\n\n        }       \n\n        this.state = {\n\n            account: localDB.account,\n            privateKey: pKey,\n            editor: false, // whether or not the quill editor is being used instead of markdown\n            editorButtonValue: \"Switch to editor\",\n            modules: {\n                \n                toolbar: {\n                    \n                    container: \"#toolbar\", // define custom toolbar as container for quill\n                    handlers: {\n\n                        image: insertImage // define image function for image button\n\n                    }\n\n                }\n\n            }\n\n        };\n\n        this.pushPost = this.pushPost.bind(this);\n        this.switchEditor = this.switchEditor.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n\n    }\n\n    pushPost() {\n\n        // check that all fields are populated\n        if (document.getElementById('title').value === \"\" || this.state.postBody === \"\" || document.getElementById('tags').value === \"\") {\n\n            alert(\"Please fill out all fields.\");\n            return;\n\n        }\n\n        //get title\n        const title = document.getElementById('title').value;\n        //get tags and convert to array list\n        const tags = document.getElementById('tags').value;\n        const taglist = tags.split(' ');\n        //check that chess is included in tags\n        if (!taglist.includes(\"chess\")) {\n\n            alert(\"Tags must contain 'chess'\");\n            return;\n\n        }\n        //make simple json metadata including only tags\n        const json_metadata = JSON.stringify({ tags: taglist });\n        //generate random permanent link for post\n        const permlink = Math.random()\n            .toString(36)\n            .substring(2);\n\n        this.setState({ permlink: permlink });\n\n        // construct payload object to broadcast\n        const payload = {\n\n            author: this.state.account,\n            body: this.state.postBody,\n            json_metadata: json_metadata,\n            parent_author: '',\n            parent_permlink: taglist[0],\n            permlink: permlink,\n            title: title,\n\n        };\n\n        // attempt to broadcast new post\n        console.log('client.broadcast.comment:', payload);\n        client.broadcast.comment(payload, this.state.privateKey).then(result => {\n\n            alert(\"Success.\");\n            this.setState({ postSubmitted: true });\n            document.getElementById(\"submitPostBtn\").disabled = true;\n\n        },\n            function (error) {\n\n                console.error(error);\n\n                // check for bad username with valid password\n                // TODO: can't redirect to login when in .then, need to pass instance of this in somehow\n                if (error.message.includes(\"unknown key\")) {\n\n                    alert(\"Bad username, please login again.\");\n                    this.props.history.push('/Login');\n                    return;\n                    \n                } else {\n\n                    // all other exceptions\n                    alert(\"An error occurred when broadcasting. See console for details.\");\n\n                }\n\n            }\n\n        );\n\n    }\n\n    switchEditor() {\n\n        // switch editor based on which is currently being used\n        // check for value that happens when text is deleted in editor and switched to markdown\n        if (this.state.editor) {\n\n            if (this.state.postBody === \"<p><br></p>\") {\n\n                this.setState({ postBody: \"\" });\n\n            }\n            this.setState({ editor: false });\n            this.setState({ editorButtonValue: \"Switch to editor\" });\n\n        } else {\n\n            this.setState({ editor: true });\n            this.setState({ editorButtonValue: \"Switch to markdown\" });\n\n        }\n\n    }\n\n    handleChange(value) {\n\n        // update postBody based on which editor is being used\n        if (this.state.editor) {\n\n            this.setState({ postBody: value });\n\n        } else {\n\n            var newBody = document.getElementById('body').value;\n            this.setState({ postBody: newBody });\n\n        }\n\n    }\n\n    render() {\n\n        return (\n\n            <div class=\"container\" id=\"content\"><br />\n\n                <h4>Submit a post to the Steem blockchain</h4>\n                Title of post: <input id=\"title\" class='input' type=\"text\" size=\"65\" class=\"form-control\" /><br />\n\n                <button id=\"switchEditorBtn\" class=\"smallBtn\" onClick={this.switchEditor}>{this.state.editorButtonValue}</button>                \n                {this.state.editor ? <div className=\"text-editor\"><CustomToolbar />\n                    <ReactQuill modules={this.state.modules} placeholder={\"Write your post here...\"} defaultValue={this.state.postBody} onChange={this.handleChange} /></div>\n                    : <textarea id=\"body\" class=\"form-control\" rows=\"3\" onChange={this.handleChange} placeholder=\"Write your post here...\" defaultValue={this.state.postBody} />}\n\n                <br />Tags: <input id=\"tags\" class='input' type=\"text\" size=\"65\" class=\"form-control\" defaultValue=\"chess\" /><br />\n                <em>Separate tags with spaces.</em><br /><br />\n\n                <input id=\"submitPostBtn\" class=\"smallBtn\" type=\"button\" value=\"Submit post!\" onClick={() => this.pushPost()} class=\"btn btn-primary\" /><br />\n                {this.state.postSubmitted ? <Link to={`Post/@${this.state.account}/${this.state.permlink}`}><h1>View new post</h1></Link> : null}\n                \n            </div>\n\n        )\n\n    }\n\n}","import React, { Component } from 'react';\nimport './JoinGameBox.css';\nimport '../Play/Play.css';\n//import ComboBox from '../Combo Box/ComboBox'\n//import ToggleSwitch from '../Toggle Switch/ToggleSwitch';\nimport ReactTable from 'react-table';\nimport 'react-table/react-table.css';\n//import LiveMatch from '../LiveMatch/LiveMatch'\n\nconst GAME_ID = 'steem-chess-'\nconst dsteem = require('dsteem');\nconst steemState = require('steem-state');\nconst client = new dsteem.Client('https://api.steemit.com');\nconst POST_GAME_TAG = 'post-game'\nconst CLOSE_REQUEST_TAG = 'request-closed';\n\nclass JoinGameBox extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            filterValue: \"\",\n            availableGames: [],\n            selected: null,\n            selectedData: null\n        };\n\n        this.processor = null;\n\n        this.getFormattedTime = this.getFormattedTime.bind(this);\n        this.joinClicked = this.joinClicked.bind(this);\n    }\n\n    componentDidMount() {\n        this.findGameRequests();\n    }\n\n    componentWillUnmount() {\n        if (this.processor != null) {\n            this.processor.stop();\n        }\n    }\n\n    /**\n     * Finds all game requests that haven't been satisfied\n     * @param {*} gameData \n     */\n    async findGameRequests()//TODO stop processor eventually and check if games were finished\n    {\n        console.log(\"Trying to find game requests\");\n        var waitingOpponents = [];\n        var maxWaitingTime = 1000 * 60 * 15;//5 minutes\n        var headBlockNumber = await this.props.findBlockHead(client);\n        this.processor = steemState(client, dsteem, Math.max(0, headBlockNumber - 350), 0, GAME_ID, 'latest');\n        this.processor.on(POST_GAME_TAG, (block) => {\n            console.log(\"found BLOCK\", block);\n            var data = block.data;\n            data.pKey = block.pKey\n            //If the request was made less than 5 minutes ago\n            if ((Date.now() - data.time) < maxWaitingTime) {\n                var gameIndex = waitingOpponents.indexOf(data.username);\n                //Opponent has a newer game\n                if (gameIndex >= 0) {\n                    var games = [...this.state.availableGames];\n                    games[gameIndex] = data;\n                    this.setState({ availableGames:games });\n                }\n                else {\n                    waitingOpponents.push(data.username);\n                    this.setState(prevState => ({\n                        availableGames: [...prevState.availableGames, data]\n                    }))\n                }\n            }\n        });\n        this.processor.on(CLOSE_REQUEST_TAG, (data) => {\n            var gameIndex = waitingOpponents.indexOf(data.username);\n            if(gameIndex >= 0) {\n                waitingOpponents.splice(gameIndex, 1);\n                var games = [...this.state.availableGames];\n                games.splice(gameIndex, 1);\n                this.setState({ availableGames:games });\n            }\n        });\n        this.processor.start();\n    }\n\n    getFormattedTime(time) {\n        var date = new Date(time);\n        var hours = date.getHours();\n        var minutes = \"0\" + date.getMinutes();\n        var seconds = \"0\" + date.getSeconds();\n        // Will display time in hh:mm:ss format\n        return hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\n    }\n\n    optionsSplitter(typeID, index) {\n        var options = typeID.split(\"|\");\n        return options.length > index + 1 ? options[index] : \"\";\n    }\n\n    getTimePerSide(typeID) {\n        return this.optionsSplitter(typeID, 1);\n    }\n\n    getTimeControlChosen(typeID) {\n        return this.optionsSplitter(typeID, 0);\n    }\n\n    joinClicked(e) {\n        this.props.onJoinGameClicked();\n    }\n\n    render() {\n        return (\n            <div className='playBox'>\n                <div>\n                    <h1>Join Game</h1>\n                </div>\n                <div id=\"join-table-div\">\n                    <ReactTable\n                        data={this.state.availableGames}\n                        columns={[{\n                            Header: \"Name\",\n                            id: \"name\",\n                            accessor: 'username'\n                        },\n                        {\n                            Header: \"Type\",\n                            id: \"type\",\n                            accessor: data => this.getTimeControlChosen(data.typeID)\n                        },\n                        {\n                            Header: \"Time\",\n                            id: \"time\",\n                            accessor: data => this.getTimePerSide(data.typeID)\n                        },\n                        {\n                            Header: \"Posted\",\n                            id: \"posted\",\n                            accessor: data => this.getFormattedTime(data.time)\n                        }]}\n                        getTrProps={(_, rowInfo) => {\n                            if (rowInfo && rowInfo.row) {\n                                return {\n                                    onClick: () => {\n                                        this.setState({\n                                            selected: rowInfo.index,\n                                            selectedData: rowInfo.original\n                                        })\n                                    },\n                                    style: {\n                                        background: rowInfo.index === this.state.selected ? '#4CAF50' : 'white',\n                                        color: rowInfo.index === this.state.selected ? 'white' : 'black'\n                                    }\n                                }\n                            } else {\n                                return {}\n                            }\n                        }}\n                        showPagination={false}\n                        noDataText='No games found'\n                        className=\"table\"\n                        resizable={false} />\n                </div>\n                <button id=\"join-game-button\" className=\"Button\" onClick={this.joinClicked}>Join Game</button>\n            </div>\n        );\n    }\n}\n\nexport default JoinGameBox;","import React, { Component } from 'react';\nimport './CreateGameBox.css';\nimport '../Play/Play.css';\n//import RadioButtonList from \"../Radio Button/RadioButtonList\";\nimport Slider from '../../shared/components/utils/Slider/Slider'\nimport BlackPiece from \"../CreateGameBox/Images/rook-black.png\";\nimport MixedPiece from \"../CreateGameBox/Images/rook-mixed.png\";\nimport WhitePiece from \"../CreateGameBox/Images/rook-white.png\";\n\nclass CreateGameBox extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            timeControlOptions: [\"Real Time\", \"Correspondence\"],\n            timeControlChosen: \"Real Time\",\n            pieceChosen: \"Random\",\n            startingColorText: \"Starting Color: Random\",\n            timePerSide: 5,\n            increment: 5,\n        };\n\n        this.pieceChanged = this.pieceChanged.bind(this);\n        this.timePerSideChanged = this.timePerSideChanged.bind(this);\n        this.incrementChanged = this.incrementChanged.bind(this);\n        this.timeControlChosen = this.timeControlChosen.bind(this);\n        this.grabGameData = this.grabGameData.bind(this);\n        this.createClicked = this.createClicked.bind(this);\n    }\n\n    pieceChanged(tag) {\n        this.setState({ pieceChosen: tag });\n        this.setState({ startingColorText: \"Starting Color: \" + tag });\n    }\n\n    timePerSideChanged(value) {\n        this.setState({ timePerSide: value });\n    }\n\n    incrementChanged(value) {\n        this.setState({ increment: value });\n    }\n\n    timeControlChosen(value) {\n        this.setState({ timeControlChosen: value });\n    }\n\n    grabGameData() {\n        return {\n            startingColor: this.state.pieceChosen,\n            username: null,\n            time: Date.now(),\n            typeID: this.state.timeControlChosen + \"|\" + this.state.timePerSide + \"|\" + this.state.increment\n        }\n    }\n\n    createClicked() {\n        this.props.onCreateGameClicked();\n    }\n\n    render() {\n        return (\n            <div className='playBox'>\n                <h1>Create Game</h1>\n                <div>\n                    <hr noshade=\"true\" className='Line' />\n                    <h3 className='Line'>Time Per Side</h3>\n                    <Slider min=\"1\"\n                        max=\"10\"\n                        value={this.state.timePerSide}\n                        step=\"0.5\"\n                        unit=\"Minutes\"\n                        onValueChanged={this.timePerSideChanged} />\n                    <h3 className='Line'>Increment</h3>\n                    <Slider min=\"1\"\n                        max=\"10\"\n                        value={this.state.increment}\n                        step=\"1\"\n                        unit=\"Seconds\"\n                        onValueChanged={this.incrementChanged} />\n                    <hr noshade=\"true\" className='Line' />\n                    <h3 className='Line'>{this.state.startingColorText}</h3>\n                    <PieceList pieceChosen={this.state.pieceChosen} onPieceChanged={this.pieceChanged} />\n                    <button className=\"Button\" onClick={this.createClicked}>Create Game</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default CreateGameBox;\n\n\nfunction Title(props) {\n    return <h1 className=\"createTitle\">{props.title}</h1>\n}\n\nTitle.defaultProps = {\n    title: \"Title\"\n};\n\nclass PieceList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            pieceChosen: this.props.pieceChosen ? this.props.pieceChosen : \"\",\n            colorChoices: [[BlackPiece, \"Black\"], [MixedPiece, \"Random\"], [WhitePiece, \"White\"]]\n        }\n    }\n\n    pieceClicked(e) {\n        this.setState({ pieceChosen: e.target.id });\n        this.props.onPieceChanged(e.target.id);\n    };\n\n    render() {\n        var pieces = this.state.colorChoices.map(([file, tag], index) =>\n            <img key={index}\n                id={tag}\n                onClick={e => this.pieceClicked(e)}\n                className={tag === this.state.pieceChosen ? \"selectedPiece\" : \"chessPiece\"}\n                src={file}\n                alt={tag} />\n        )\n        return (\n            <span className=\"pieceListSpan\">\n                {pieces}\n            </span>\n        );\n    }\n}","import React, { Component } from 'react';\nimport './Play.css';\nimport JoinGameBox from '../JoinGameBox/JoinGameBox';\nimport CreateGameBox from \"../CreateGameBox/CreateGameBox\";\nimport Peer from 'simple-peer';\nimport { loadState } from \"../../components/localStorage\";\nimport PubSub from 'pubsub-js';\nimport RSA from 'cryptico';\nconst cryptico = require('cryptico');\n\nconst dsteem = require('dsteem');\nconst steemState = require('steem-state');\nconst steemTransact = require('steem-transact');\nconst client = new dsteem.Client('https://api.steemit.com');\nconst maxWaitingTime = 1000 * 60 * 5;\n\n//Blockchain message tags\nconst GAME_ID = 'steem-chess-'\nconst POST_GAME_TAG = 'post-game'\nconst JOIN_TAG = 'request-join';\nconst PEER_INIT_TAG = 'signal-i';\nconst PEER_NOT_INIT_TAG = 'signal-ni';\nconst CLOSE_REQUEST_TAG = 'request-closed';\n\nconst DISABLE_BLOCKCHAIN = false;//Used for testing purposes. Allows developer to go to chess page without communicating with blockchain\n\nclass Play extends Component {\n    constructor(props) {\n        super(props);\n\n        this.transactor = steemTransact(client, dsteem, GAME_ID);\n        this.processor = null;\n        this.username = null;\n        this.posting_key = null;\n        this.peer = null;\n        this.optionClicked = false;\n\n        this.createGameComponent = React.createRef();\n        this.joinGameComponent = React.createRef();\n\n        this.gameRequestBlocks = [];\n        this.closeRequestBlocks = [];\n\n        this.findBlockHead = this.findBlockHead.bind(this);\n        this.createGameClicked = this.createGameClicked.bind(this);\n        this.joinGameClicked = this.joinGameClicked.bind(this);\n    }\n\n    generatePersonalKey() {\n        this.personalRSA = cryptico.generateRSAKey(Math.random().toString(), 1024);\n        this.publicKey = cryptico.publicKeyString(this.personalRSA);\n    }\n\n    encrypt(message, publicKey)\n    {\n        if(publicKey === undefined)\n        {\n            console.error(\"Tried to encrypt without a key\");\n            return;\n        }\n        var encrypted = cryptico.encrypt(message.toString(), publicKey);\n        if(encrypted.status === \"success\") return encrypted.cipher;\n        console.error(\"Failed to encrypt message\");\n        return null;\n    }\n\n    decrypt(message)\n    {\n        var decrypted = RSA.decrypt(message.toString(), this.personalRSA);\n        if(decrypted.status === \"success\") return decrypted.plaintext;\n        console.error(\"Failed to decrypt message\");\n        return null;\n    }\n\n        /**\n     * Calculates a hash code for a string\n     * @param {*} text \n     */\n    getStringHashCode(text) {\n        var hash = 0, i, chr;\n        if (text.length === 0) return hash;\n        for (i = 0; i < text.length; i++) {\n            chr = text.charCodeAt(i);\n            hash = ((hash << 5) - hash) + chr;\n            hash |= 0; // Convert to 32bit integer\n        }\n        return hash;\n    }\n\n    componentWillUnmount() {\n        if (this.processor !== null) {\n            this.processor.stop();\n        }\n        clearTimeout(this.failedToJoinTimeout);//TODO not working\n        clearTimeout(this.createGameTimeout);//TODO not working\n        PubSub.publish('spinner', { spin: false });\n    }\n\n    componentDidMount() {\n        var localDB = loadState();\n        if (localDB.account == null) {\n            this.props.history.push(\"/Login\");\n            return;\n        }\n        this.username = localDB.account;\n        try {\n            this.posting_key = dsteem.PrivateKey.fromString(localDB.key);\n        }\n        catch (e) {\n\n            console.error(e);\n\n            // check for garbage login, redirect to login if privatekey can't be generated\n            // this exception is thrown if password is invalid or is not a posting key, does not check for username/password association\n            if (e.message === \"private key network id mismatch\") {\n\n                alert(\"Bad password.\");\n                this.props.history.push('/Login');\n                return;\n\n            } else {\n\n                // if any other exception is thrown, redirect to home\n                alert(\"An error occurred when generating key. See console for details.\");\n                this.props.history.push('/');\n                return;\n\n            }\n        }\n        this.generatePersonalKey();\n    }\n\n    /**\n     * Finds the most recent block number\n     * @param {*} client The dsteem client\n     */\n    async findBlockHead(client) { //TODO specify game_id somehow\n        return new Promise((resolve, reject) => {\n            if (client == null) {\n                reject(\"client is null\");\n            }\n            try {\n                client.database.getDynamicGlobalProperties().then((result) => {\n                    resolve(result.head_block_number);\n                });\n            } catch (err) {\n                console.error(err);\n                reject(\"Failed to find block head\");\n            }\n        });\n    }\n\n    /**\n * Checks if a game has recently been requested with the same data\n */\n    async findWaitingPlayers(gameData) {\n        if (DISABLE_BLOCKCHAIN) return;\n\n        var headBlockNumber = await this.findBlockHead(client);\n        this.processor = steemState(client, dsteem, Math.max(0, headBlockNumber - 150), 1, GAME_ID, 'latest');\n        try {\n            this.processor.on(POST_GAME_TAG, (block) => {\n                console.log(\"Game block found\", block);\n                if (this.matchableGames(gameData, block.data)) {\n                    this.gameRequestBlocks.push(block);\n                }\n            });\n            this.processor.on(CLOSE_REQUEST_TAG, (data) => {\n                console.log(\"Close request found\", data);\n                if (this.matchableGames(gameData, data)) {\n                    this.closeRequestBlocks.push(data);\n                }\n            });\n            this.processor.start();\n        } catch (err) {\n            console.error(err)\n            if (this.processor !== null)\n                this.processor.stop();\n            console.error(\"Failed to check for waiting players\");\n        }\n    }\n\n    /**\n     * Determines whether to send a join request to an existing posted game, \n     * or to create a new post game request\n     */\n    checkWaitingPlayers() {\n        if (DISABLE_BLOCKCHAIN) return;\n\n        console.log(\"finding the best game to connect to\");\n        if (this.processor !== null) {\n            this.processor.stop();\n        }\n        if (this.gameRequestBlocks.length > 0) {\n            var waitingPlayers = [];\n            //Finds the most recent game request from each player, which was created\n            //less than 5 minutes ago\n            for (var i = this.gameRequestBlocks.length - 1; i >= 0; --i) {\n                //TODO check that the user is not the same as the current person once testing is complete\n                var iBlock = this.gameRequestBlocks[i];\n                if (!waitingPlayers.includes(iBlock.data.username) &&\n                    (Date.now() - iBlock.data.time) < maxWaitingTime) {\n                    waitingPlayers.push(iBlock);\n                }\n            }\n            //Removes games where the player already connected to someone else\n            for (var j = this.closeRequestBlocks.length - 1; j >= 0; --j) {\n                var jBlock = this.closeRequestBlocks[j];\n                var playerIndex = waitingPlayers.indexOf(jBlock.username);\n                if (playerIndex >= 0) {\n                    var possibleClosedGame = waitingPlayers[playerIndex];\n                    if (jBlock.time === possibleClosedGame.time) {\n                        waitingPlayers.splice(playerIndex, 1);\n                    }\n                }\n            }\n            if (waitingPlayers.length > 0) {\n                return waitingPlayers[0];\n            }\n        }\n    }\n\n    /**\n     * Checks if two games are compatable\n     * @param {*} first\n     * @param {*} second\n     */\n    matchableGames(first, second) {\n        if (first.typeID !== second.typeID)\n            return false;\n        return first.startingColor === \"Random\" || first.startingColor !== second.startingColor;\n    }\n\n    /**\n     * Requests to start RTC with a user\n     * @param {string} username The opponent's username\n     */\n    async sendGameRequest(opponentData) {\n        return new Promise((resolve, reject) => {\n            if (DISABLE_BLOCKCHAIN) resolve();\n\n            console.log(\"sending request to existing game\");\n            this.gameData.startingColor = this.decideRandom(this.gameData.startingColor, opponentData.startingColor);\n            opponentData.startingColor = this.decideRandom(opponentData.startingColor, this.gameData.startingColor);\n            this.transactor.json(this.username, this.posting_key.toString(), JOIN_TAG, {data:opponentData, pKey:this.publicKey},\n                (err, result) => {\n                    if (err) {\n                        console.error(err);\n                        reject(err);\n                        alert(\"Failed to send game request\");\n                    }\n                    else if (result) {\n                        console.log(\"sent request to existing game\", this.gameData);\n                        this.opponentUsername = opponentData.username;\n                        this.initializePeer(false);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Decides on random starting color for thisColor\n     */\n    decideRandom(thisColor, thatColor) {\n        if (thisColor !== \"Random\") return thisColor.toString();\n        if (thatColor === \"Black\") return \"White\";\n        if (thatColor === \"White\") return \"Black\";\n        return Math.random() < 0.5 ? \"White\" : \"Black\";\n    }\n\n    /**\n     * Puts game request onto the blockchain\n     */\n    async postGameRequest() {\n        return new Promise((resolve, reject) => {\n            if (DISABLE_BLOCKCHAIN) resolve();\n\n            console.log(\"posting a new game request\");\n            this.transactor.json(this.username, this.posting_key.toString(), POST_GAME_TAG, {data:this.gameData, pKey:this.publicKey},\n                (err, result) => {\n                    if (err) {\n                        console.error(err);\n                        reject(err);\n                        alert(\"Failed to request game\");\n                    }\n                    else if (result) {\n                        console.log(\"posted game request\", result);\n                        this.listenForJoinTag(result.block_num);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Opens a stream to listen to join requests\n     */\n    listenForJoinTag(currentBlockNumber) {\n        this.processor = steemState(client, dsteem, currentBlockNumber, 100, GAME_ID);\n        try {\n            this.processor.on(JOIN_TAG, (block) => {\n                console.log(\"Listen for join tag block\", block);\n                var data = block.data;\n                if (this.username === data.username && this.gameData.typeID === data.typeID) {\n                    console.log(\"accepted join block\");\n                    this.gameData.startingColor = block.data.startingColor;\n                    this.opponentUsername = block.username;\n                    this.opponentKey = block.pKey;\n                    this.initializePeer(true);\n                }\n            });\n            this.processor.start();\n        } catch (err) {\n            console.error(err);\n            if (this.processor !== null)\n                this.processor.stop();\n            alert(\"Game request failed\");\n        }\n\n        this.failedToJoinTimeout = setTimeout(() => {//TODO put timeouts in more places, for different parts of the process\n            if (this.peer == null) {\n                if (this.processor !== null)\n                    this.processor.stop();\n                PubSub.publish('spinner', { spin: false });\n                alert(\"Failed to find opponent within 5 minutes\");\n            }\n        }, maxWaitingTime);\n    }\n\n    /**\n     * Creates a new peer\n     * @param {bool} initializingConnection True if this peer is creating the offer\n     * the offer\n     */\n    async initializePeer(initializingConnection) {\n        if (DISABLE_BLOCKCHAIN) return;\n\n        var receivingTag = initializingConnection === true ? PEER_INIT_TAG : PEER_NOT_INIT_TAG;\n        var sendingTag = initializingConnection === true ? PEER_NOT_INIT_TAG : PEER_INIT_TAG;\n\n        console.log(\"starting initializePeer\");\n        this.peer = new Peer({ initiator: initializingConnection, trickle: false });\n        this.peer.on('error', (err) => {\n            console.error(err)\n            alert(\"Failed to connect to opponent :(\");\n        });\n\n        this.peer.on('signal', (data) => {\n            this.sendSignalToUser(sendingTag, data);\n        });\n\n        this.peer.on('connect', () => {\n            if (initializingConnection === true) {\n                this.transactor.json(this.username, this.posting_key.toString(), CLOSE_REQUEST_TAG, this.gameData, (err) => {\n                    if (err) {\n                        console.error(err);\n                    }\n                });\n            }\n            this.props.history.push({\n                pathname: '/Live',\n                gameData: this.gameData,\n                peer: this.peer,\n            });\n            console.log('Connected to peer!');\n        });\n\n        var headerBlockNumber = await this.findBlockHead(client);\n        this.processor = steemState(client, dsteem, headerBlockNumber, 100, GAME_ID);\n        this.processor.on(receivingTag, (signal) => {\n            if (this.peer !== null) {\n                var decryptedSignal = JSON.parse(this.decrypt(signal.signal));\n                if(decryptedSignal == null)\n                    console.error(\"Failed to decrypt incoming RTC signal\");\n                else\n                    this.peer.signal(decryptedSignal);\n            }\n        });\n        this.processor.start();\n    }\n\n    /**\n     * Sends a webRTC signal to the opponent through the blockchain\n     * @param {string} username\n     * @param {*} signal\n     */\n    sendSignalToUser(sendingTag, signal) {\n        if (DISABLE_BLOCKCHAIN) return;\n\n        console.log(\"starting sendSignalToUser\");\n        var encryptedSignal = this.encrypt(JSON.stringify(signal), this.opponentKey);\n        this.transactor.json(this.username, this.posting_key.toString(), sendingTag, {\n            signal: encryptedSignal,\n            from: this.username\n        }, (err) => {\n            if (err) {\n                console.error(err);\n                alert(\"Failed opponent connection process\");\n            }\n        });\n    }\n\n    createGameClicked() {\n        if (this.optionClicked) return;\n        this.optionClicked = true;\n        this.gameData = this.createGameComponent.current.grabGameData();\n        this.gameData.username = this.username;\n\n        if (DISABLE_BLOCKCHAIN) {\n            this.props.history.push({\n                pathname: '/Live',\n                gameData: this.gameData,\n                opponentUsername: this.opponentUsername,\n            });\n            return;\n        }\n\n        PubSub.publish('spinner', { spin: true });\n\n        this.findWaitingPlayers(this.gameData);\n        //If opponent not found after 15 seconds, post a game request\n        this.createGameTimeout = setTimeout(() => {\n            var opponentBlock = this.checkWaitingPlayers();\n            if (opponentBlock == null) {\n                this.postGameRequest();\n            }\n            else {\n                this.opponentKey = opponentBlock.pKey\n                this.sendGameRequest(opponentBlock.data);\n            }\n        }, 15000);\n    }\n\n    joinGameClicked() {\n        if (this.optionClicked) return;\n        this.optionClicked = true;\n        var opponentData = this.joinGameComponent.current.state.selectedData;\n        if (opponentData == null) {\n            console.error(\"Opponent data null\");\n            return;\n        }\n        this.opponentKey = opponentData.pKey;\n\n        this.gameData = {\n            startingColor: \"Random\",\n            username: this.username,\n            time: opponentData.time,\n            typeID: opponentData.typeID\n        }\n\n        if (DISABLE_BLOCKCHAIN) {\n            this.props.history.push({\n                pathname: '/Live',\n                gameData: this.gameData,\n                opponentUsername: this.opponentUsername,\n            });\n            return;\n        }\n\n        PubSub.publish('spinner', { spin: true });\n\n        this.sendGameRequest(opponentData);\n    }\n\n    render() {\n        return (\n            <div className=\"horizontal play-div\">\n                <CreateGameBox ref={this.createGameComponent}\n                    onCreateGameClicked={this.createGameClicked} />\n                <JoinGameBox ref={this.joinGameComponent}\n                    onJoinGameClicked={this.joinGameClicked}\n                    findBlockHead={this.findBlockHead} />\n            </div>\n        )\n    }\n\n}\n\nexport default Play","import React, {Component} from 'react';\nimport './Login.css';\nimport {loadState, saveState} from \"../../../components/localStorage\";\nimport {withRouter} from \"react-router-dom\";\n\n\nclass Login extends Component {\n    \n            constructor(props) {\n                super(props);\n\n                if(localStorage.getItem('login') !== null)\n                {\n                    localStorage.removeItem('account');\n                    localStorage.removeItem('pKey');\n                    localStorage.removeItem('login');\n                    // had to comment this out to get bad login redirects to work\n                    // causes logout button to say 'logout' after pressed once, refreshes when page is changed\n                    //this.props.history.push('/');\n                }\n\n                this.state = {\n                    account: \"\",\n                    password: \"\"\n                };\n                this.handleAccountChange = this.handleAccountChange.bind(this);\n                this.handlePasswordChange = this.handlePasswordChange.bind(this);\n                this.handleLogin = this.handleLogin.bind(this);\n    }\n\n    async handleAccountChange(e){\n        await this.setState({account: e.target.value});\n        console.log(this.state.account);\n    }\n\n    async handlePasswordChange(e){\n        await this.setState({password: e.target.value});\n        console.log(this.state.password);\n    }\n\n    handleLogin(e){\n        saveState(this.state.account, this.state.password, \"loggedIn\");\n        this.props.history.push('/');\n    }\n\n    render() {\n        return (\n            <div className=\"Login\">\n                <form>\n                    <label>\n                        Account:\n                        <input type=\"text\" value={this.state.account}  onChange={this.handleAccountChange} id=\"Account\"/>\n                    </label>\n                    <br/>\n                    <label >\n                        Password:\n                        <input type=\"password\" value={this.state.password}  onChange={this.handlePasswordChange} id=\"Password\"/>\n                    </label>\n                    <br/>\n                    <button onClick={this.handleLogin} id=\"submit\">Login</button>\n                </form>\n        </div>\n        )\n    }\n}\n\nexport default Login;","import React, {Component} from \"react\";\nimport SpinnerImage from \"./spinner.gif\"\nimport './Spinner.css';\n\nclass Spinner extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                { this.props.enabled ? <img className=\"spinner\" src={SpinnerImage} alt=\"spinner\" /> : null }\n            </div>\n        );\n    }\n}\n\nexport default Spinner;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from '../shared/components/layout/Header';\nimport Footer from '../shared/components/layout/Footer';\nimport Content from '../shared/components/layout/Content';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport ArticleFeed from './ArticleFeed/ArticleFeed';\nimport LiveMatch from './LiveMatch/LiveMatch';\nimport Post from './Post/Post';\nimport UpVote from './UpVote/UpVote';\nimport Compose from './Compose/Compose';\nimport Play from './Play/Play';\nimport Login from \"../shared/components/Login/Login\";\nimport Spinner from \"../shared/components/utils/Spinner/Spinner\";\nimport PubSub from 'pubsub-js';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            spinning: false,\n        }\n    }\n\n    componentDidMount() {\n        PubSub.subscribe('spinner', (_, message) => {\n            this.setState({ spinning: message.spin });\n        });\n    }\n\n    componentWillUnmount() {\n        PubSub.unsubscribe(this.spinnerToken)\n    }\n\n    render() {\n        return (\n            <Router>\n                <div className=\"App\">\n                    <Spinner enabled={this.state.spinning}/>\n                    <Header />\n                    <Content>\n                        <Route path='/'\n                            render={(props) => <ArticleFeed {...props} limit={'10'} sortMethod={'trending'} />}\n                            exact />\n                        <Route path='/Hot' render={(props) => <ArticleFeed {...props} limit={'10'} sortMethod={'hot'} />}\n                            exact />\n                        <Route path='/New'\n                            render={(props) => <ArticleFeed {...props} limit={'10'} sortMethod={'created'} />} exact />\n                        <Route path='/Play' render={(props) => <Play {...props} getAccessToken={this.getAccessToken} />}\n                            exact />\n                        <Route path='/Live'\n                               render={(props) => <LiveMatch {...props} getAccessToken={this.getAccessToken}/>} exact/>\n                        <Route path='/Post/@:author/:permlink' component={Post} exact/>\n                        <Route path= '/UpVote/' component={UpVote} exact/>\n                        <Route path='/Compose' component={Compose} exact/>\n                        <Route path='/Login' component={Login} exact/>\n                    </Content>\n                    <Footer />\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit http://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport {BrowserRouter as Router} from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n    (\n\n        <Router>\n            <App/>\n        </Router>),\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}